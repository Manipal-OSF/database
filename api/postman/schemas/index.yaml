openapi: '3.0.0'
info:
  version: '1.0.0'
  title: 'Database API'
  description: Intermediate API that interacts with the database and other OSF projects

servers:
  - url: 'https://manipalosf.org'

paths:
  /api/v1/dashboard/login:
    post:
      requestBody:
        description: 'Admin login to the supabase database'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminLogin'
      summary: Admin login to supabase
      responses:
        200:
          description: The login session token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginSession'
        404:
          description: Wrong credentials entered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/bot/users:
    get:
      summary: Get bot users
      responses:
        200:
          description: Array of all bot users
          content:
            application/json:
              schema:
                type: string

  /api/v1/dashboard/users:
    get:
      summary: Get all users
      responses:
        200:
          description: Array of all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        404:
          description: Failed to fetch fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    patch:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      summary: Update a user field
      responses:
        200:
          description: User field updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserField'
        404:
          description: Failed to update field
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      summary: ""
      responses:
        200:
          description: New user created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: Failed to update user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    AdminLogin:
      description: Login schema
      type: object
      required:
        - supabaseKey
      properties:
        supabaseKey:
          type: string

    UserArray:
      description: Array of usersuser's 
      required:
        - users
      properties:
        users:
          type: array
          items:
            properties:
              id:
                $ref: '#/components/schemas/User'

    User:
      description: A user
      type: object
      required:
        - name
        - designation
        - registrationNumber
        - phoneNumber
        - email
        - department
        - year
        - location
      properties:
        name:
          type: string
          description: The name of the user
          example: "John"
        title:
          type: string
          description: Honorary title for the user
          enum:
            - Founder
            - CoFounder
          example: "Founder"
        designation:
          type: array
          description: Current designation in the flat or normal hierarchies
          items:
            type: string
            enum:
              - Board
              - Interim
              - F1
              - F2
              - WC
              - MC
          example: "Board"
        registrationNumber:
          type: integer
          description: The registration number of the user as provided by the college
          example: 123456789
        phoneNumber:
          type: integer
          description: The 10 digit phone number of the user
          example: 1234567890
        discord:
          type: integer
          description: The Discord ID of the user
          example: 111111111111111111
        github:
          type: string
          description: The GitHub ID of the user
          example: "dhzdhd"
        email:
          type: string
          description: The email ID of the user
          format: email
          example: "abc@gmail.com"
        department:
          type: array
          description: The department(s) the user belongs to
          items:
            type: string
            enum:
              - Academics
              - Development
              - Relations
              - Multimedia
              - CreatorCollaboratorProgram
        year:
          type: integer
          description: The year of joining the college
          example: 2023
        remarks:
          type: string
          description: Remarks for a particular user as given by the Board
          example: "Considered for Board"
        strikes:
          type: integer
          description: Number of strikes for a particular user
          default: 0
          example: 5
        location:
          type: string
          description: Current college city location of the user
          enum:
            - Manipal
            - Bangalore
          example: "Manipal"

    Error:
      type: object
      required:
        - message
      properties:
        message:
          description: A human readable error message
          type: string
  
  securitySchemes:
    ApiKey:
      type: apiKey
      in: header
      name: X-Api-Key

security:
  - ApiKey: []